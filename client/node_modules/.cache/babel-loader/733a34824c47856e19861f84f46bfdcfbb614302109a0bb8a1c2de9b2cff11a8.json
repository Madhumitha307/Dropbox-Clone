{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nconst useFileStore = create((set, get) => ({\n  files: [],\n  loading: false,\n  error: null,\n  uploadProgress: 0,\n  // Fetch all files\n  fetchFiles: async () => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await axios.get('/files');\n      set({\n        files: response.data,\n        loading: false\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      set({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch files',\n        loading: false\n      });\n    }\n  },\n  // Upload a file\n  uploadFile: async file => {\n    set({\n      loading: true,\n      error: null,\n      uploadProgress: 0\n    });\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          set({\n            uploadProgress: progress\n          });\n        }\n      });\n\n      // Add the new file to the list\n      const newFile = response.data.file;\n      set(state => ({\n        files: [newFile, ...state.files],\n        loading: false,\n        uploadProgress: 0\n      }));\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      set({\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to upload file',\n        loading: false,\n        uploadProgress: 0\n      });\n      throw error;\n    }\n  },\n  // Download a file\n  downloadFile: async (fileId, filename) => {\n    try {\n      const response = await axios.get(`/files/${fileId}`, {\n        responseType: 'blob'\n      });\n\n      // Create a download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      set({\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to download file'\n      });\n      throw error;\n    }\n  },\n  // Clear error\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  // Format file size\n  formatFileSize: bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  },\n  // Get file icon based on type\n  getFileIcon: mimetype => {\n    if (mimetype.startsWith('image/')) {\n      return 'üñºÔ∏è';\n    } else if (mimetype === 'text/plain') {\n      return 'üìÑ';\n    } else if (mimetype === 'application/json') {\n      return 'üìã';\n    }\n    return 'üìÅ';\n  }\n}));\nexport default useFileStore;","map":{"version":3,"names":["create","axios","useFileStore","set","get","files","loading","error","uploadProgress","fetchFiles","response","data","_error$response","_error$response$data","uploadFile","file","formData","FormData","append","post","headers","onUploadProgress","progressEvent","progress","Math","round","loaded","total","newFile","state","_error$response2","_error$response2$data","downloadFile","fileId","filename","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","_error$response3","_error$response3$data","clearError","formatFileSize","bytes","k","sizes","i","floor","log","parseFloat","pow","toFixed","getFileIcon","mimetype","startsWith"],"sources":["/home/madhumitha/Dropbox/client/src/store/fileStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport axios from 'axios';\r\n\r\nconst useFileStore = create((set, get) => ({\r\n  files: [],\r\n  loading: false,\r\n  error: null,\r\n  uploadProgress: 0,\r\n\r\n  // Fetch all files\r\n  fetchFiles: async () => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const response = await axios.get('/files');\r\n      set({ files: response.data, loading: false });\r\n    } catch (error) {\r\n      set({ \r\n        error: error.response?.data?.error || 'Failed to fetch files', \r\n        loading: false \r\n      });\r\n    }\r\n  },\r\n\r\n  // Upload a file\r\n  uploadFile: async (file) => {\r\n    set({ loading: true, error: null, uploadProgress: 0 });\r\n    \r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await axios.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          const progress = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          set({ uploadProgress: progress });\r\n        },\r\n      });\r\n\r\n      // Add the new file to the list\r\n      const newFile = response.data.file;\r\n      set(state => ({\r\n        files: [newFile, ...state.files],\r\n        loading: false,\r\n        uploadProgress: 0\r\n      }));\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      set({ \r\n        error: error.response?.data?.error || 'Failed to upload file', \r\n        loading: false,\r\n        uploadProgress: 0\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Download a file\r\n  downloadFile: async (fileId, filename) => {\r\n    try {\r\n      const response = await axios.get(`/files/${fileId}`, {\r\n        responseType: 'blob',\r\n      });\r\n\r\n      // Create a download link\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', filename);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      set({ \r\n        error: error.response?.data?.error || 'Failed to download file'\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Clear error\r\n  clearError: () => {\r\n    set({ error: null });\r\n  },\r\n\r\n  // Format file size\r\n  formatFileSize: (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  },\r\n\r\n  // Get file icon based on type\r\n  getFileIcon: (mimetype) => {\r\n    if (mimetype.startsWith('image/')) {\r\n      return 'üñºÔ∏è';\r\n    } else if (mimetype === 'text/plain') {\r\n      return 'üìÑ';\r\n    } else if (mimetype === 'application/json') {\r\n      return 'üìã';\r\n    }\r\n    return 'üìÅ';\r\n  }\r\n}));\r\n\r\nexport default useFileStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}